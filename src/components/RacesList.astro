---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Card } from "@/components/ui/card";
import { CardHeader } from "@/components/ui/card";
import { CardFooter } from "@/components/ui/card";
import { CardTitle } from "@/components/ui/card";
import { CardDescription } from "@/components/ui/card";
import { CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";

async function getAllRaces() {
  const races = await getCollection('races');
  return races.sort((a, b) => 
    new Date(a.data.date).getTime() - new Date(b.data.date).getTime()
  );
}

async function getUpcomingRaces() {
  const races = await getAllRaces();
  const now = new Date();
  return races.filter(race => new Date(race.data.date) > now);
}

function groupRacesByMonth(races: CollectionEntry<"races">[]) {
  const groups = new Map<string, CollectionEntry<"races">[]>();
  
  races.forEach(race => {
    const date = new Date(race.data.date);
    const monthYear = date.toLocaleDateString('en-NZ', { year: 'numeric', month: 'long' });
    if (!groups.has(monthYear)) {
      groups.set(monthYear, []);
    }
    groups.get(monthYear)?.push(race);
  });

  return Array.from(groups.entries());
}

const races = await getAllRaces();
const groupedRaces = groupRacesByMonth(races);
---

<div class="max-w-3xl mx-auto p-4 min-h-screen">
  {groupedRaces.map(([monthYear, monthRaces], groupIndex) => (
    <div class="mb-12">
      <div class="sticky top-0 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 z-10 py-4 mb-8">
        <h2 class="text-2xl font-semibold">{monthYear}</h2>
      </div>

      <div class="space-y-8">
        {monthRaces.map((race) => (
          <Card variant="secondary">
            <CardHeader>
              <div class="flex justify-between items-start">
                <CardTitle class="text-xl">{race.data.title}</CardTitle>
                <div class="flex gap-2">
                  {race.data.terrain && (
                    <Badge variant="outline">
                      {race.data.terrain}
                    </Badge>
                  )}
                  {race.data.status && (
                    <Badge variant="secondary">
                      {race.data.status}
                    </Badge>
                  )}
                </div>
              </div>
              <Separator className="my-3" />
              <CardDescription>
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span>{new Date(race.data.date).toLocaleDateString('en-NZ', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}</span>
                </div>
                
                <div class="flex items-center mt-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span>{race.data.location}</span>
                </div>
              </CardDescription>
            </CardHeader>

            <CardContent>
              <div class="flex space-x-4 mb-4">
                {race.data.distance && (
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                    <span>{race.data.distance}km</span>
                  </div>
                )}
                
                {race.data.elevation && (
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                    </svg>
                    <span>{race.data.elevation}m</span>
                  </div>
                )}
              </div>

              <p>{race.data.description}</p>
            </CardContent>

            {race.data.registrationUrl && (
              <CardFooter>
                <Button asChild variant="outline">
                  <a href={race.data.registrationUrl}>
                    Register Now
                  </a>
                </Button>
              </CardFooter>
            )}
          </Card>
        ))}
      </div>
    </div>
  ))}
</div>

{races.length === 0 && (
  <div class="text-center py-12">
    <p class="text-lg">No upcoming races at the moment. Check back soon!</p>
  </div>
)} 